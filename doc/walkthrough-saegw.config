%% -*-Erlang-*-
[{setup, [{data_dir, "/var/lib/ergw"},
	  {log_dir,  "/var/log/ergw-c-node"}
	 ]},

 {kernel,
  [{logger,
    [{handler, default, logger_std_h,
      #{level => info,
	config =>
	    #{sync_mode_qlen => 10000,
	      drop_mode_qlen => 10000,
	      flush_qlen     => 10000}
       }
     }
    ]}
  ]},

 {ergw, [{'$setup_vars',
	  [{"ORIGIN", {value, "epc.mnc001.mcc001.3gppnetwork.org"}}]},
	 {http_api,
	  [{port, 8080},
	   {ip, {0,0,0,0}}
	  ]},

	 {sockets,
	  [{epc, [{type, 'gtp-c'},
		  {ip,  {172,20,16,1}},
		  {netdev, "vrf-irx"}
		 ]}
	  ]},

	 {vrfs,
	  [{sgi, [{pools,  [{{10, 180, 0, 1}, {10, 180, 255, 254}, 32}]},
		  {'MS-Primary-DNS-Server', {8,8,8,8}},
		  {'MS-Secondary-DNS-Server', {8,8,4,4}},
		  {'MS-Primary-NBNS-Server', {127,0,0,1}},
		  {'MS-Secondary-NBNS-Server', {127,0,0,1}}
		 ]}
	  ]},

	 {sx_socket,
	  [{node, 'ergw'},
	   {name, 'ergw'},
	   {ip, {0,0,0,0}
	   }
	  ]},

	 {handlers,
	  [{s11, [{handler, saegw_s11},
		  {sockets, [epc]},
		  {node_selection, [default]}
		 ]}
	  ]},

	 {apns,
	  [{[<<"APN1">>], [{vrf, sgi}]},
	   {['_'], [{vrf, sgi}]}                         %% wildcard APN
	  ]},

	 {node_selection,
	  [{default,
	    {static,
	     [
	      %% APN NAPTR alternative
	      {"_default.apn.$ORIGIN", {300,64536},
	       [{"x-3gpp-pgw","x-s5-gtp"},{"x-3gpp-pgw","x-s8-gtp"},
		{"x-3gpp-sgw","x-s5-gtp"},{"x-3gpp-sgw","x-s8-gtp"}],
	       "topon.s1u.saegw.$ORIGIN"},
	      {"_default.apn.$ORIGIN", {300,64536},
	       [{"x-3gpp-upf","x-sxb"}],
	       "topon.sx.saegw01.$ORIGIN"},

	      %% A/AAAA record alternatives
	      {"topon.s1u.saegw.$ORIGIN", [{172,20,17,1}], []},
	      {"topon.sx.saegw01.$ORIGIN", [{192,168,1,1}], []}
	     ]
	    }
	   }
	  ]
	 }
	]},

 {ergw_aaa, [
	     {ergw_aaa_provider, {ergw_aaa_mock, [{shared_secret, <<"MySecret">>}]}}
	    ]},

 {hackney, [
	    {mod_metrics, exometer}
	   ]},

 {jobs, [{samplers,
	  [{cpu_feedback, jobs_sampler_cpu, []}
	  ]},
	 {queues,
	  [{path_restart,
	    [{regulators, [{counter, [{limit, 100}]}]},
	     {modifiers,  [{cpu_feedback, 10}]} %% 10 = % increment by which to modify the limit
	    ]},
	   {create,
	    [{max_time, 5000}, %% max 5 seconds
	     {regulators, [{rate, [{limit, 100}]}]},
	     {modifiers,  [{cpu_feedback, 10}]} %% 10 = % increment by which to modify the limit
	    ]},
	   {delete,
	    [{regulators, [{counter, [{limit, 100}]}]},
	     {modifiers,  [{cpu_feedback, 10}]} %% 10 = % increment by which to modify the limit
	    ]},
	   {other,
	    [{max_time, 10000}, %% max 10 seconds
	     {regulators, [{rate, [{limit, 1000}]}]},
	     {modifiers,  [{cpu_feedback, 10}]} %% 10 = % increment by which to modify the limit
	    ]}
	  ]}
	]}
].
